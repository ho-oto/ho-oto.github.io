<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cacao&#39;s repaying</title>
    <link>https://ho-oto.github.io/</link>
    <description>Recent content on Cacao&#39;s repaying</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Hayate Nakano</copyright>
    <lastBuildDate>Fri, 14 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ho-oto.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ブログを作り直した</title>
      <link>https://ho-oto.github.io/blog/3e566e4f-65bc-440e-a1c4-adf111c6edee/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ho-oto.github.io/blog/3e566e4f-65bc-440e-a1c4-adf111c6edee/</guid>
      <description>このブログを作ったときは、GithubのissueをCMSとして使うような仕組みにしていたのだが、思っていた以上に管理がやりにくかったので、Notionを使うように変更した。ベッドで寝転がりながら編集したりすることを考えると、アプリの完成度が高いNotionが最適解かなという気がしたので。
NotionをCMSに使ったブログシステムというのは探すと色々出てくるが、せっかくなので自作することにしたら思っていたよりも面倒だった。
面倒だったとこ ページ全体を返すAPIが無い まず面倒なのが、Notionはページの内容をmarkdownやHTMLとして返すようなAPIを（公式には）公開していないという点。Webからならば使えるので、非公式なAPIを叩けばできるのかもしれないが、いつ変更が入るかも分からないので使いたくはない。
APIから取得できるのはNotionのブロックオブジェクトの配列である。ブロックオブジェクトは子要素を持つ場合があるが、その場合は子要素を取得するために再度APIを叩く必要がある。
ページを構成するすべての要素を取得できれば、あとはそれをページとして再構成することになるが、自作すると必ず文字列のエスケープ等でバグらせると思ったので、NotionのページをPandocのASTに変換するRust製ツール
https://github.com/ho-oto/notion2pandoc
を自作した。まあまあ苦労したので、Zennにも投稿したらそれなりには反応があって良かった。
https://zenn.dev/ho_oto/articles/7ff736187aa16f
PandocのASTがあれば、そこから好きな形式のドキュメントに変換するのは簡単にできる。
ただし、NotionのembedブロックやcalloutブロックなどはPandocASTに対応物が無いので、とりあえずdiv要素に変換しておいて、後で処理する必要がある。特に面倒なのがembed要素。
Twitter等の埋め込み対応 markdownを直接書いてHugoで変換する場合には、Hugoのshortcode機能を使って{{&amp;lt; twitter id=123 &amp;gt;}}のように書くことでTwitterの埋め込みを作ったりできる（構文うろ覚え）。これは裏でtwitterの埋め込み用HTMLタグを返すAPIを叩くようになっている。この埋め込みタグを返すAPIにはoEmbedという規格が決まっており、oEmbed APIを提供しているサービス一覧がまとまっているjsonファイルも公開されている（が全てを網羅しているわけでは無い）。
ということで、Notionのembedブロックについては、oEmbed APIを使ってタグの取得を試み、うまく行かないときには単なるリンクとして表示するようにした。
この他にも細々とした処理を色々とPythonで書いたスクリプトがあり、これをGithub Actionsで実行することでNotionとGithubリポジトリの内容が同期されるようになっている。
https://github.com/ho-oto/ho-oto.github.io/blob/main/generate_from_notion.py
NotionからWebhookを使う ここで問題になるのが、このActionをどのように発火させるかという話だった。CMSとして提供されているサービスであれば、記事の更新に合わせてWebhookを叩くような機能があるが、Notionには（おそらく）無い。であれば、Actionを起動するためのリンクをどこかに用意しておいて、クリックするだけで記事が更新されるようにするのが良さそう。
最初はIFTTTのWebhook機能を使えば解決かと思っていたのだが、手元からは通るリクエストがIFTTTからだと動かず、調べてみるとGithub側がIFTTTからのリクエストを遮断しているっぽい。結局Google App Scriptを使って、GETするとActionが発火するだけのAPIを作って解決した。
公開日と最終変更日をどうするか ブログであれば公開日と最終変更日を表示したいわけだが、Notionに公開日という概念は無い。あるのは作成日時、言い換えれば執筆開始日時である。最終変更日時という概念はあるのだが、例えば昔の記事を確認したときブロックの位置を少し動かしてしまった、みたいな変更でも更新扱いになるので、正直扱いにくい。
ここについては諦めて、記事を保存しているDBのカラムに公開日と最終更新日を手動で入れるための領域を作った。まあ、大した手間じゃ無いしいいでしょう。
まとめ ブログをNotionをCMSとして使うように作り直した。無駄にPandocのAPIに詳しくなってしまったので、そのうち役に立つ日が来ることを願うばかりである。
なお、諸々のコードは
https://github.com/ho-oto/ho-oto.github.io
に置いてある。</description>
    </item>
    
    <item>
      <title>sample post</title>
      <link>https://ho-oto.github.io/blog/06a3b25d-f9b8-4534-8661-af0039d245a9/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ho-oto.github.io/blog/06a3b25d-f9b8-4534-8661-af0039d245a9/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit,
sed do do aaa
eiusmod eiusmod eiusmod eiusmod eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo
consequat. Duis aute irure
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
fn foo() -&amp;gt; bool { true } dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>2022-07-21</title>
      <link>https://ho-oto.github.io/log/09f56cd7-8375-479a-aacc-79d54380ada6/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ho-oto.github.io/log/09f56cd7-8375-479a-aacc-79d54380ada6/</guid>
      <description>やったこと 月曜日からrustlingsをちびちび解いて、とりあえず全部解いた。一部、出題者の意図を正しく汲めているか不安な問題もあるけど。
GitHubでスターをつけて満足してしまったハンズオンが無限に存在するので、真面目に向き合っていきたい。次はWrite yourself a Git!をなんか別言語で実装したい。</description>
    </item>
    
    <item>
      <title>2022-07-02</title>
      <link>https://ho-oto.github.io/log/79c76885-5d41-4f54-95a7-e3c950024b23/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ho-oto.github.io/log/79c76885-5d41-4f54-95a7-e3c950024b23/</guid>
      <description>気分が憂鬱でしんどい日だった
やったこと 院に行って薬をもらった。よりによって15:00に予約をとったので、一日で一番暑い時間に外出する羽目になってしまった。
これだけだと外出し損なので、映画館に行ってゆるキャン△の映画を見た。眼鏡を忘れたので最前席に座ったが、スクリーンの上のほうは物理的に遠くてぼやけてしまったので、首が痛くなるだけであまり意味なかった。</description>
    </item>
    
    <item>
      <title>2022-07-01</title>
      <link>https://ho-oto.github.io/log/1710de01-e0e1-462b-b65e-9485288a7799/</link>
      <pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ho-oto.github.io/log/1710de01-e0e1-462b-b65e-9485288a7799/</guid>
      <description>7月に入ったしいい加減にこの日記をちゃんと稼働させたい。
やったこと WSL2用の環境構成スクリプトを整理していた。GitHub ActionsでCIを回してはいたけど、WSL上じゃないと使えないコマンドがあったり、CI上ではプリインストールされているソフトウェアがたくさんあって挙動が変わったりと、最後はローカルでデバッグするしかないのがつらい。
Ubuntu-22.04がWindows Storeに来ていたのでそれを使ってデバッグしていた。Windows11に上げてWSLgが使えるようになった筈だが、メインの用途は外からSSH接続してあれこれすることなので、活かせるか謎だ。</description>
    </item>
    
    <item>
      <title>2022-06-23</title>
      <link>https://ho-oto.github.io/log/a37a4753-21fc-466e-b71c-1ae3d49063bb/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ho-oto.github.io/log/a37a4753-21fc-466e-b71c-1ae3d49063bb/</guid>
      <description>入社式以来の物理出社をした。自分がいかに混んでいる電車というものが嫌いかを再認識した。異常に疲れてしまったので、とくに何の学習もせずに寝る。</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://ho-oto.github.io/about/</link>
      <pubDate>Sun, 19 Jun 2022 15:59:14 +0900</pubDate>
      
      <guid>https://ho-oto.github.io/about/</guid>
      <description>Publications Hong Yang, HN, and Hosho Katsura, Symmetry-protected topological phases in spinful bosons with a flat band, Phys. Rev. Research 3, 023210 (2021)
HN, Tatsuhiko Shirai, and Takashi Mori, Tensor network approach to thermalization in open quantum many-body systems, Phys. Rev. E 103, L040102 (2021)
HN and Seiji Miyashita, Characterization of localized effective spins in gapped quantum spin chains, Phys. Rev. B 100, 195105 (2019)
Software TensorRules.jl TensorRules.jl provides a macro @∇ which derives a custom adjoints for functions containing @tensor and @tensoropt macros.</description>
    </item>
    
  </channel>
</rss>
